import React, { useState } from 'react';
import { View, TextInput, TouchableOpacity, ScrollView, ImageBackground, StyleSheet } from 'react-native';
import { Text } from 'react-native';
import { getAuth } from 'firebase/auth';
import { getFirestore, addDoc, collection, Timestamp, updateDoc, doc } from 'firebase/firestore';
import { Ionicons } from '@expo/vector-icons';
import { showMessage } from 'react-native-flash-message';
import { styled } from 'nativewind';

const StyledView = styled(View);
const StyledText = styled(Text);
const StyledTextInput = styled(TextInput);
const StyledTouchableOpacity = styled(TouchableOpacity);
const StyledScrollView = styled(ScrollView);
const StyledImageBackground = styled(ImageBackground);

const db = getFirestore();
const auth = getAuth();

// Define the FoodGroup type first
type Portion = {
  calories: number;
  protein: number;
  carbs: number;
  fats: number;
};

type FoodGroup = {
  name: string;
  icon: string;
  basePortions: {
    small: Portion;
    medium: Portion;
    large: Portion;
  };
};

// Add these type definitions after the FoodGroup type
type PortionSize = 'small' | 'medium' | 'large';
type MealType = keyof typeof averageMeals;

// First, let's add a type and constant for our categories
type MealCategory = '–ó–ê–ö–£–°–ö–ò' | '–û–ë–Ø–î' | '–í–ï–ß–ï–†–Ø' | '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï' | '–°–ù–ê–ö–°–û–í–ï';

const mealCategories: { [key: string]: MealCategory } = {
  // –ó–ê–ö–£–°–ö–ò
  breakfast_pastry: '–ó–ê–ö–£–°–ö–ò',
  breakfast_banitsa: '–ó–ê–ö–£–°–ö–ò',
  breakfast_sandwich: '–ó–ê–ö–£–°–ö–ò',
  breakfast_eggs: '–ó–ê–ö–£–°–ö–ò',
  breakfast_musli: '–ó–ê–ö–£–°–ö–ò',
  breakfast_pancakes: '–ó–ê–ö–£–°–ö–ò',
  
  // –û–ë–Ø–î
  lunch_soup: '–û–ë–Ø–î',
  lunch_grill: '–û–ë–Ø–î',
  lunch_stew: '–û–ë–Ø–î',
  lunch_rice_dish: '–û–ë–Ø–î',
  lunch_pasta: '–û–ë–Ø–î',
  lunch_sarmi: '–û–ë–Ø–î',
  lunch_moussaka: '–û–ë–Ø–î',
  
  // –í–ï–ß–ï–†–Ø
  dinner_grill: '–í–ï–ß–ï–†–Ø',
  dinner_chicken: '–í–ï–ß–ï–†–Ø',
  dinner_pork: '–í–ï–ß–ï–†–Ø',
  dinner_fish: '–í–ï–ß–ï–†–Ø',
  dinner_salad: '–í–ï–ß–ï–†–Ø',
  dinner_eggs: '–í–ï–ß–ï–†–Ø',
  dinner_vegetables: '–í–ï–ß–ï–†–Ø',
  
  // –ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï
  fastfood_kebab: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  fastfood_burger: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  fastfood_pizza: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  fastfood_hotdog: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  fastfood_fries: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  fastfood_gyros: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  fastfood_shawarma: '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï',
  
  // –°–ù–ê–ö–°–û–í–ï
  snack_fruit: '–°–ù–ê–ö–°–û–í–ï',
  snack_nuts: '–°–ù–ê–ö–°–û–í–ï',
  snack_sweets: '–°–ù–ê–ö–°–û–í–ï',
  snack_yogurt: '–°–ù–ê–ö–°–û–í–ï',
  snack_chocolate: '–°–ù–ê–ö–°–û–í–ï',
  snack_icecream: '–°–ù–ê–ö–°–û–í–ï',
  snack_chips: '–°–ù–ê–ö–°–û–í–ï',
  snack_popcorn: '–°–ù–ê–ö–°–û–í–ï',
  snack_crackers: '–°–ù–ê–ö–°–û–í–ï',
  snack_pretzel: '–°–ù–ê–ö–°–û–í–ï',
  snack_croissant: '–°–ù–ê–ö–°–û–í–ï',
};

// Add this type for collapsible state
type CollapsibleState = { [key in MealCategory]: boolean };

const averageMeals: { [key: string]: FoodGroup } = {
  // –ó–ê–ö–£–°–ö–ò
  breakfast_pastry: {
    name: '–¢–µ—Å—Ç–µ–Ω–∏ –∑–∞–∫—É—Å–∫–∏',
    icon: 'ü•®',
    basePortions: {
      small: { calories: 250, protein: 8, carbs: 40, fats: 8 },
      medium: { calories: 350, protein: 12, carbs: 55, fats: 12 },
      large: { calories: 450, protein: 15, carbs: 70, fats: 16 }
    }
  },
  breakfast_banitsa: {
    name: '–ë–∞–Ω–∏—Ü–∞',
    icon: 'ü•ü',
    basePortions: {
      small: { calories: 300, protein: 10, carbs: 35, fats: 15 },
      medium: { calories: 450, protein: 15, carbs: 50, fats: 22 },
      large: { calories: 600, protein: 20, carbs: 65, fats: 30 }
    }
  },
  breakfast_sandwich: {
    name: '–°–∞–Ω–¥–≤–∏—á',
    icon: 'ü•™',
    basePortions: {
      small: { calories: 250, protein: 12, carbs: 30, fats: 10 },
      medium: { calories: 400, protein: 18, carbs: 45, fats: 15 },
      large: { calories: 550, protein: 25, carbs: 60, fats: 20 }
    }
  },
  breakfast_eggs: {
    name: '–Ø–π—Ü–∞',
    icon: 'üç≥',
    basePortions: {
      small: { calories: 150, protein: 12, carbs: 1, fats: 10 },
      medium: { calories: 300, protein: 24, carbs: 2, fats: 20 },
      large: { calories: 450, protein: 36, carbs: 3, fats: 30 }
    }
  },
  breakfast_musli: {
    name: '–ú—é—Å–ª–∏',
    icon: 'ü•£',
    basePortions: {
      small: { calories: 200, protein: 6, carbs: 35, fats: 5 },
      medium: { calories: 300, protein: 9, carbs: 52, fats: 8 },
      large: { calories: 400, protein: 12, carbs: 70, fats: 10 }
    }
  },
  breakfast_pancakes: {
    name: '–ü–∞–ª–∞—á–∏–Ω–∫–∏',
    icon: 'ü•û',
    basePortions: {
      small: { calories: 250, protein: 8, carbs: 40, fats: 8 },
      medium: { calories: 375, protein: 12, carbs: 60, fats: 12 },
      large: { calories: 500, protein: 16, carbs: 80, fats: 16 }
    }
  },

  // –û–ë–Ø–î
  lunch_soup: {
    name: '–°—É–ø–∞',
    icon: 'ü•£',
    basePortions: {
      small: { calories: 150, protein: 8, carbs: 20, fats: 5 },
      medium: { calories: 250, protein: 12, carbs: 30, fats: 8 },
      large: { calories: 350, protein: 16, carbs: 40, fats: 12 }
    }
  },
  lunch_grill: {
    name: '–°–∫–∞—Ä–∞',
    icon: 'üçñ',
    basePortions: {
      small: { calories: 400, protein: 35, carbs: 5, fats: 25 },
      medium: { calories: 600, protein: 50, carbs: 8, fats: 35 },
      large: { calories: 800, protein: 65, carbs: 10, fats: 45 }
    }
  },
  lunch_stew: {
    name: '–ì–æ—Ç–≤–µ–Ω–æ',
    icon: 'ü•ò',
    basePortions: {
      small: { calories: 350, protein: 20, carbs: 35, fats: 15 },
      medium: { calories: 500, protein: 30, carbs: 50, fats: 22 },
      large: { calories: 650, protein: 40, carbs: 65, fats: 30 }
    }
  },
  lunch_rice_dish: {
    name: '–Ø—Å—Ç–∏–µ —Å –æ—Ä–∏–∑',
    icon: 'üçö',
    basePortions: {
      small: { calories: 350, protein: 15, carbs: 55, fats: 10 },
      medium: { calories: 500, protein: 22, carbs: 75, fats: 15 },
      large: { calories: 650, protein: 30, carbs: 95, fats: 20 }
    }
  },
  lunch_pasta: {
    name: '–ü–∞—Å—Ç–∞',
    icon: 'üçù',
    basePortions: {
      small: { calories: 350, protein: 12, carbs: 65, fats: 8 },
      medium: { calories: 500, protein: 16, carbs: 90, fats: 12 },
      large: { calories: 650, protein: 20, carbs: 115, fats: 16 }
    }
  },
  lunch_sarmi: {
    name: '–°–∞—Ä–º–∏',
    icon: 'ü•¨',
    basePortions: {
      small: { calories: 300, protein: 12, carbs: 45, fats: 10 },
      medium: { calories: 450, protein: 18, carbs: 67, fats: 15 },
      large: { calories: 600, protein: 24, carbs: 90, fats: 20 }
    }
  },
  lunch_moussaka: {
    name: '–ú—É—Å–∞–∫–∞',
    icon: 'ü•ò',
    basePortions: {
      small: { calories: 400, protein: 20, carbs: 35, fats: 22 },
      medium: { calories: 600, protein: 30, carbs: 52, fats: 33 },
      large: { calories: 800, protein: 40, carbs: 70, fats: 44 }
    }
  },

  // –í–ï–ß–ï–†–Ø
  dinner_grill: {
    name: '–°–∫–∞—Ä–∞',
    icon: 'ü•©',
    basePortions: {
      small: { calories: 400, protein: 35, carbs: 5, fats: 25 },
      medium: { calories: 600, protein: 50, carbs: 8, fats: 35 },
      large: { calories: 800, protein: 65, carbs: 10, fats: 45 }
    }
  },
  dinner_chicken: {
    name: '–ü–∏–ª–µ—à–∫–æ',
    icon: 'üçó',
    basePortions: {
      small: { calories: 300, protein: 30, carbs: 0, fats: 18 },
      medium: { calories: 450, protein: 45, carbs: 0, fats: 27 },
      large: { calories: 600, protein: 60, carbs: 0, fats: 36 }
    }
  },
  dinner_pork: {
    name: '–°–≤–∏–Ω—Å–∫–æ',
    icon: 'ü•©',
    basePortions: {
      small: { calories: 350, protein: 25, carbs: 0, fats: 28 },
      medium: { calories: 500, protein: 35, carbs: 0, fats: 40 },
      large: { calories: 650, protein: 45, carbs: 0, fats: 52 }
    }
  },
  dinner_fish: {
    name: '–†–∏–±–∞',
    icon: 'üêü',
    basePortions: {
      small: { calories: 250, protein: 25, carbs: 0, fats: 15 },
      medium: { calories: 375, protein: 37, carbs: 0, fats: 22 },
      large: { calories: 500, protein: 50, carbs: 0, fats: 30 }
    }
  },
  dinner_salad: {
    name: '–°–∞–ª–∞—Ç–∞',
    icon: 'ü•ó',
    basePortions: {
      small: { calories: 150, protein: 5, carbs: 15, fats: 8 },
      medium: { calories: 250, protein: 8, carbs: 25, fats: 14 },
      large: { calories: 350, protein: 12, carbs: 35, fats: 20 }
    }
  },
  dinner_eggs: {
    name: '–Ø–π—Ü–∞',
    icon: 'üç≥',
    basePortions: {
      small: { calories: 150, protein: 12, carbs: 1, fats: 10 },
      medium: { calories: 300, protein: 24, carbs: 2, fats: 20 },
      large: { calories: 450, protein: 36, carbs: 3, fats: 30 }
    }
  },
  dinner_vegetables: {
    name: '–ó–µ–ª–µ–Ω—á—É—Ü–∏',
    icon: 'ü•¶',
    basePortions: {
      small: { calories: 100, protein: 4, carbs: 20, fats: 2 },
      medium: { calories: 150, protein: 6, carbs: 30, fats: 3 },
      large: { calories: 200, protein: 8, carbs: 40, fats: 4 }
    }
  },

  // –ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï
  fastfood_kebab: {
    name: '–î—é–Ω–µ—Ä',
    icon: 'ü•ô',
    basePortions: {
      small: { calories: 450, protein: 25, carbs: 45, fats: 22 },
      medium: { calories: 650, protein: 35, carbs: 65, fats: 32 },
      large: { calories: 850, protein: 45, carbs: 85, fats: 42 }
    }
  },
  fastfood_burger: {
    name: '–ë—É—Ä–≥–µ—Ä',
    icon: 'üçî',
    basePortions: {
      small: { calories: 400, protein: 20, carbs: 40, fats: 20 },
      medium: { calories: 600, protein: 30, carbs: 60, fats: 30 },
      large: { calories: 800, protein: 40, carbs: 80, fats: 40 }
    }
  },
  fastfood_pizza: {
    name: '–ü–∏—Ü–∞',
    icon: 'üçï',
    basePortions: {
      small: { calories: 400, protein: 15, carbs: 50, fats: 15 },
      medium: { calories: 600, protein: 22, carbs: 75, fats: 22 },
      large: { calories: 800, protein: 30, carbs: 100, fats: 30 }
    }
  },
  fastfood_hotdog: {
    name: '–•–æ—Ç-–¥–æ–≥',
    icon: 'üå≠',
    basePortions: {
      small: { calories: 300, protein: 12, carbs: 30, fats: 15 },
      medium: { calories: 450, protein: 18, carbs: 45, fats: 22 },
      large: { calories: 600, protein: 24, carbs: 60, fats: 30 }
    }
  },
  fastfood_fries: {
    name: '–ü—ä—Ä–∂–µ–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏',
    icon: 'üçü',
    basePortions: {
      small: { calories: 250, protein: 3, carbs: 35, fats: 12 },
      medium: { calories: 400, protein: 5, carbs: 56, fats: 19 },
      large: { calories: 550, protein: 7, carbs: 77, fats: 26 }
    }
  },
  fastfood_gyros: {
    name: '–ì–∏—Ä–æ—Å',
    icon: 'ü•ô',
    basePortions: {
      small: { calories: 450, protein: 25, carbs: 45, fats: 22 },
      medium: { calories: 650, protein: 35, carbs: 65, fats: 32 },
      large: { calories: 850, protein: 45, carbs: 85, fats: 42 }
    }
  },
  fastfood_shawarma: {
    name: '–®–∞—É—Ä–º–∞',
    icon: 'üåØ',
    basePortions: {
      small: { calories: 500, protein: 25, carbs: 50, fats: 25 },
      medium: { calories: 700, protein: 35, carbs: 70, fats: 35 },
      large: { calories: 900, protein: 45, carbs: 90, fats: 45 }
    }
  },

  // –°–ù–ê–ö–°–û–í–ï
  snack_fruit: {
    name: '–ü–ª–æ–¥–æ–≤–µ',
    icon: 'üçé',
    basePortions: {
      small: { calories: 60, protein: 1, carbs: 15, fats: 0 },
      medium: { calories: 120, protein: 2, carbs: 30, fats: 0 },
      large: { calories: 180, protein: 3, carbs: 45, fats: 0 }
    }
  },
  snack_nuts: {
    name: '–Ø–¥–∫–∏',
    icon: 'ü•ú',
    basePortions: {
      small: { calories: 160, protein: 6, carbs: 6, fats: 14 },
      medium: { calories: 320, protein: 12, carbs: 12, fats: 28 },
      large: { calories: 480, protein: 18, carbs: 18, fats: 42 }
    }
  },
  snack_sweets: {
    name: '–°–ª–∞–¥–∫–∏',
    icon: 'üç™',
    basePortions: {
      small: { calories: 150, protein: 2, carbs: 25, fats: 6 },
      medium: { calories: 300, protein: 4, carbs: 50, fats: 12 },
      large: { calories: 450, protein: 6, carbs: 75, fats: 18 }
    }
  },
  snack_yogurt: {
    name: '–ö–∏—Å–µ–ª–æ –º–ª—è–∫–æ',
    icon: 'ü•õ',
    basePortions: {
      small: { calories: 100, protein: 8, carbs: 12, fats: 2 },
      medium: { calories: 200, protein: 16, carbs: 24, fats: 4 },
      large: { calories: 300, protein: 24, carbs: 36, fats: 6 }
    }
  },
  snack_chocolate: {
    name: '–®–æ–∫–æ–ª–∞–¥',
    icon: 'üç´',
    basePortions: {
      small: { calories: 150, protein: 2, carbs: 15, fats: 9 },
      medium: { calories: 300, protein: 4, carbs: 30, fats: 18 },
      large: { calories: 450, protein: 6, carbs: 45, fats: 27 }
    }
  },
  snack_icecream: {
    name: '–°–ª–∞–¥–æ–ª–µ–¥',
    icon: 'üç¶',
    basePortions: {
      small: { calories: 200, protein: 4, carbs: 25, fats: 10 },
      medium: { calories: 350, protein: 7, carbs: 44, fats: 17 },
      large: { calories: 500, protein: 10, carbs: 63, fats: 25 }
    }
  },
  snack_chips: {
    name: '–ß–∏–ø—Å',
    icon: 'ü•î',
    basePortions: {
      small: { calories: 150, protein: 2, carbs: 15, fats: 10 },
      medium: { calories: 300, protein: 4, carbs: 30, fats: 20 },
      large: { calories: 450, protein: 6, carbs: 45, fats: 30 }
    }
  },
  snack_popcorn: {
    name: '–ü—É–∫–∞–Ω–∫–∏',
    icon: 'üçø',
    basePortions: {
      small: { calories: 100, protein: 2, carbs: 20, fats: 3 },
      medium: { calories: 200, protein: 4, carbs: 40, fats: 6 },
      large: { calories: 300, protein: 6, carbs: 60, fats: 9 }
    }
  },
  snack_crackers: {
    name: '–ö—Ä–µ–∫–µ—Ä–∏',
    icon: 'üçò',
    basePortions: {
      small: { calories: 120, protein: 2, carbs: 20, fats: 4 },
      medium: { calories: 240, protein: 4, carbs: 40, fats: 8 },
      large: { calories: 360, protein: 6, carbs: 60, fats: 12 }
    }
  },
  snack_pretzel: {
    name: '–°–æ–ª–µ—Ç–∏',
    icon: 'ü•®',
    basePortions: {
      small: { calories: 110, protein: 3, carbs: 22, fats: 1 },
      medium: { calories: 220, protein: 6, carbs: 44, fats: 2 },
      large: { calories: 330, protein: 9, carbs: 66, fats: 3 }
    }
  },
  snack_croissant: {
    name: '–ö—Ä–æ–∞—Å–∞–Ω',
    icon: 'ü•ê',
    basePortions: {
      small: { calories: 230, protein: 4, carbs: 25, fats: 12 },
      medium: { calories: 340, protein: 6, carbs: 37, fats: 18 },
      large: { calories: 450, protein: 8, carbs: 49, fats: 24 }
    }
  }
};

// Then modify the meal type selection part in the JSX to group by categories
const groupedMeals = Object.entries(averageMeals).reduce((acc, [type, meal]) => {
  const category = mealCategories[type];
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push({ type, meal });
  return acc;
}, {} as { [key in MealCategory]: { type: string; meal: FoodGroup }[] });

// In the quick select section, add this disclaimer component
const DisclaimerText = () => (
  <View style={styles.disclaimerContainer}>
    <Ionicons name="information-circle-outline" size={20} color="#999999" />
    <Text style={styles.disclaimerText}>
      –¢–æ–≤–∞ —Å–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏. –†–µ–∞–ª–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –º–æ–∂–µ –¥–∞ —Å–µ —Ä–∞–∑–ª–∏—á–∞–≤–∞—Ç —Å–ø–æ—Ä–µ–¥ —Å—ä—Å—Ç–∞–≤–∫–∏—Ç–µ.
    </Text>
  </View>
);

// Update the ManualInputForm component with better styling
const ManualInputForm = ({ onSave }: { onSave: (meal: { name: string; calories: number; protein: number; carbs: number; fats: number }) => void }) => {
  const [name, setName] = useState('');
  const [calories, setCalories] = useState('');
  const [protein, setProtein] = useState('');
  const [carbs, setCarbs] = useState('');
  const [fats, setFats] = useState('');

  const handleSave = () => {
    if (!name.trim() || name.length == 0) {
      showMessage({
        message: '–ì—Ä–µ—à–∫–∞',
        description: '–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ –Ω–∞ —è—Å—Ç–∏–µ—Ç–æ',
        type: 'danger'
      });
      return;
    }

    const mealData = {
      name: name.trim(),
      calories: Number(calories) || 0,
      protein: Number(protein) || 0,
      carbs: Number(carbs) || 0,
      fats: Number(fats) || 0
    };

    onSave(mealData);
    setName('');
    setCalories('');
    setProtein('');
    setCarbs('');
    setFats('');
  };

  return (
    <View style={styles.manualInputContainer}>
      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>–ò–º–µ –Ω–∞ —è—Å—Ç–∏–µ—Ç–æ</Text>
        <TextInput
          style={styles.inputField}
          placeholder="–ù–∞–ø—Ä. –ü–∏–ª–µ—à–∫–∞ —Å—É–ø–∞"
          placeholderTextColor="#666666"
          value={name}
          onChangeText={setName}
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.inputLabel}>–ö–∞–ª–æ—Ä–∏–∏</Text>
        <TextInput
          style={styles.inputField}
          placeholder="kcal"
          placeholderTextColor="#666666"
          keyboardType="numeric"
          value={calories}
          onChangeText={setCalories}
        />
      </View>

      <View style={styles.macroInputsContainer}>
        <View style={styles.macroInputGroup}>
          <Text style={styles.inputLabel}>–ü—Ä–æ—Ç–µ–∏–Ω–∏</Text>
          <TextInput
            style={styles.macroInput}
            placeholder="g"
            placeholderTextColor="#666666"
            keyboardType="numeric"
            value={protein}
            onChangeText={setProtein}
          />
        </View>

        <View style={styles.macroInputGroup}>
          <Text style={styles.inputLabel}>–í—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏</Text>
          <TextInput
            style={styles.macroInput}
            placeholder="g"
            placeholderTextColor="#666666"
            keyboardType="numeric"
            value={carbs}
            onChangeText={setCarbs}
          />
        </View>

        <View style={styles.macroInputGroup}>
          <Text style={styles.inputLabel}>–ú–∞–∑–Ω–∏–Ω–∏</Text>
          <TextInput
            style={styles.macroInput}
            placeholder="g"
            placeholderTextColor="#666666"
            keyboardType="numeric"
            value={fats}
            onChangeText={setFats}
          />
        </View>
      </View>

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>–ó–∞–ø–∞–∑–∏</Text>
      </TouchableOpacity>
    </View>
  );
};

const PlanMealScreen = ({ 
  navigation, 
  route 
}: { 
  navigation: any; // TODO: Replace with proper navigation type
  route: any; // TODO: Replace with proper route type 
}) => {
    const editingMeal = route.params?.meal;
    const [selectedMealType, setSelectedMealType] = useState<MealType>('breakfast_pastry');
    const [selectedPortion, setSelectedPortion] = useState<PortionSize>('medium');
    const [showManualInput, setShowManualInput] = useState(false);
    const [error, setError] = useState('');
    const [collapsedCategories, setCollapsedCategories] = useState<CollapsibleState>({
        '–ó–ê–ö–£–°–ö–ò': true,
        '–û–ë–Ø–î': true,
        '–í–ï–ß–ï–†–Ø': true,
        '–ë–™–†–ó–û –•–†–ê–ù–ï–ù–ï': true,
        '–°–ù–ê–ö–°–û–í–ï': true
    });

    const handleQuickSelect = (mealType: MealType, portion: PortionSize) => {
        const meal = averageMeals[mealType].basePortions[portion];
        const portionName = portion === 'small' ? '–ú–∞–ª–∫–∞' : 
                           portion === 'medium' ? '–°—Ä–µ–¥–Ω–∞' : '–ì–æ–ª—è–º–∞';
        const mealData = {
            name: `${averageMeals[mealType].name} (${portionName})`,
            calories: meal.calories,
            protein: meal.protein,
            carbs: meal.carbs,
            fats: meal.fats,
            mealType: mealType
        };

        handleSaveMeal(mealData);
    };

    const handleSaveMeal = async (mealData: any) => {
        try {
            const user = auth.currentUser;
            if (!user) return;

            const finalMealData = {
                ...mealData,
                timestamp: new Date(),
                type: selectedMealType,
                source: 'quick_add'
            };

            await addDoc(collection(db, 'users', user.uid, 'meals'), finalMealData);
            showMessage({ message: '–Ø—Å—Ç–∏–µ—Ç–æ –µ –¥–æ–±–∞–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', type: 'success' });
            navigation.goBack();
        } catch (error) {
            console.error('Error saving meal:', error);
            showMessage({ message: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —è—Å—Ç–∏–µ—Ç–æ', type: 'danger' });
        }
    };

    const toggleCategory = (category: MealCategory) => {
        setCollapsedCategories(prev => ({
            ...prev,
            [category]: !prev[category]
        }));
    };

    // Update the renderCategories function with better styling
    const renderCategories = () => (
        <View style={styles.categoriesContainer}>
            {(Object.keys(groupedMeals) as MealCategory[]).map((category) => (
                <View key={category} style={styles.categoryWrapper}>
                    <TouchableOpacity 
                        style={[
                            styles.categoryHeader,
                            !collapsedCategories[category] && styles.categoryHeaderActive
                        ]}
                        onPress={() => toggleCategory(category)}
                    >
                        <Text style={styles.categoryTitle}>{category}</Text>
                        <View style={styles.categoryHeaderRight}>
                            <Text style={styles.itemCount}>
                                {groupedMeals[category]?.length || 0} —è—Å—Ç–∏—è
                            </Text>
                            <Ionicons 
                                name={collapsedCategories[category] ? 'chevron-down' : 'chevron-up'} 
                                size={24} 
                                color="#4CAF50" 
                            />
                        </View>
                    </TouchableOpacity>
                    {!collapsedCategories[category] && (
                        <View style={styles.mealTypeContainer}>
                            {groupedMeals[category]?.map(({ type, meal }) => (
                                <TouchableOpacity
                                    key={type}
                                    style={[
                                        styles.mealTypeButton,
                                        selectedMealType === type && styles.selectedMealType
                                    ]}
                                    onPress={() => setSelectedMealType(type as MealType)}
                                >
                                    <Text style={styles.mealTypeIcon}>{meal.icon}</Text>
                                    <Text style={styles.mealTypeText}>{meal.name}</Text>
                                </TouchableOpacity>
                            ))}
                        </View>
                    )}
                </View>
            ))}
        </View>
    );

    return (
        <StyledImageBackground
            source={{ uri: 'https://i.imgur.com/8F9ZGpX.png' }}
            style={{ flex: 1 }}
            blurRadius={5}
        >
            <View style={{ backgroundColor: 'rgba(0,0,0,0.9)', flex: 1 }}>
                <StyledScrollView>
                    <View style={styles.headerContainer}>
                        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
                            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
                        </TouchableOpacity>
                        <Text style={styles.headerTitle}>–û—Ç—á–µ—Ç–µ—Ç–µ —Ö—Ä–∞–Ω–µ–Ω–µ</Text>
                    </View>

                    <View style={styles.container}>
                        {/* Toggle between quick and manual input */}
                        <View style={styles.toggleContainer}>
                            <TouchableOpacity
                                style={[styles.toggleButton, !showManualInput && styles.selectedToggle]}
                                onPress={() => setShowManualInput(false)}
                            >
                                <Text style={styles.toggleText}>–ë—ä—Ä–∑–æ –æ—Ç—á–∏—Ç–∞–Ω–µ</Text>
                            </TouchableOpacity>
                            <TouchableOpacity
                                style={[styles.toggleButton, showManualInput && styles.selectedToggle]}
                                onPress={() => setShowManualInput(true)}
                            >
                                <Text style={styles.toggleText}>–†—ä—á–Ω–æ –æ—Ç—á–∏—Ç–∞–Ω–µ</Text>
                            </TouchableOpacity>
                        </View>

                        {showManualInput ? (
                            <ManualInputForm onSave={handleSaveMeal} />
                        ) : (
                            <View style={styles.quickSelectContainer}>
                                <DisclaimerText />
                                <Text style={styles.sectionTitle}>–í–∏–¥ —è—Å—Ç–∏–µ</Text>
                                {renderCategories()}

                                {/* Portion Size Selection */}
                                <Text style={styles.sectionTitle}>–†–∞–∑–º–µ—Ä –Ω–∞ –ø–æ—Ä—Ü–∏—è—Ç–∞</Text>
                                <View style={styles.portionContainer}>
                                    {['small', 'medium', 'large'].map((size) => (
                                        <TouchableOpacity
                                            key={size}
                                            style={[
                                                styles.portionButton,
                                                selectedPortion === size && styles.selectedPortion
                                            ]}
                                            onPress={() => setSelectedPortion(size as PortionSize)}
                                        >
                                            <Text style={styles.portionText}>
                                                {size === 'small' ? '–ú–∞–ª–∫–∞' : 
                                                 size === 'medium' ? '–°—Ä–µ–¥–Ω–∞' : '–ì–æ–ª—è–º–∞'}
                                            </Text>
                                        </TouchableOpacity>
                                    ))}
                                </View>

                                {/* Preview Macros */}
                                <View style={styles.macroPreview}>
                                    <Text style={styles.macroText}>
                                        {averageMeals[selectedMealType as MealType].basePortions[selectedPortion as PortionSize].calories} kcal
                                    </Text>
                                    <Text style={styles.macroDetails}>
                                        –ü—Ä–æ—Ç–µ–∏–Ω–∏: {averageMeals[selectedMealType as MealType].basePortions[selectedPortion as PortionSize].protein}g
                                    </Text>
                                    <Text style={styles.macroDetails}>
                                        –í—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏: {averageMeals[selectedMealType as MealType].basePortions[selectedPortion as PortionSize].carbs}g
                                    </Text>
                                    <Text style={styles.macroDetails}>
                                        –ú–∞–∑–Ω–∏–Ω–∏: {averageMeals[selectedMealType as MealType].basePortions[selectedPortion as PortionSize].fats}g
                                    </Text>
                                </View>

                                <TouchableOpacity 
                                    style={styles.saveButton}
                                    onPress={() => handleQuickSelect(selectedMealType as MealType, selectedPortion as PortionSize)}
                                >
                                    <Text style={styles.saveButtonText}>–û—Ç—á–µ—Ç–∏</Text>
                                </TouchableOpacity>
                            </View>
                        )}
                    </View>
                </StyledScrollView>
            </View>
        </StyledImageBackground>
    );
};

const styles = StyleSheet.create({
    headerContainer: { flexDirection: 'row', alignItems: 'center', paddingTop: 60, paddingHorizontal: 15 },
    backButton: { padding: 10 },
    headerTitle: { fontSize: 24, fontWeight: '300', color: '#FFFFFF', marginLeft: 15 },
    container: { flex: 1, padding: 20 },
    inputContainer: { backgroundColor: '#1A1A1A', borderRadius: 15, padding: 20, marginBottom: 20 },
    inputWrapper: { flexDirection: 'row', alignItems: 'center', backgroundColor: '#000000', borderRadius: 10, padding: 15, marginBottom: 15 },
    input: { flex: 1, color: '#FFFFFF', fontSize: 16, marginLeft: 15 },
    errorText: { color: 'red', fontSize: 16, marginBottom: 10, textAlign: 'center' },
    saveButton: { backgroundColor: '#4CAF50', borderRadius: 10, padding: 15, alignItems: 'center', marginTop: 20 },
    saveButtonText: { color: '#FFFFFF', fontSize: 18, fontWeight: 'bold' },
    toggleContainer: {
        flexDirection: 'row',
        marginBottom: 20,
    },
    toggleButton: {
        flex: 1,
        padding: 12,
        backgroundColor: '#1A1A1A',
        marginHorizontal: 5,
        borderRadius: 12,
        alignItems: 'center',
    },
    selectedToggle: {
        backgroundColor: '#4CAF50',
    },
    toggleText: {
        color: '#FFFFFF',
        fontSize: 14,
        fontWeight: '500',
    },
    manualInputContainer: {
        padding: 20,
        backgroundColor: '#1A1A1A',
        borderRadius: 12,
        gap: 20,
    },
    inputGroup: {
        marginBottom: 15,
    },
    inputLabel: {
        color: '#FFFFFF',
        fontSize: 14,
        marginBottom: 8,
        fontWeight: '500',
    },
    inputField: {
        backgroundColor: '#000000',
        borderRadius: 8,
        padding: 12,
        color: '#FFFFFF',
        fontSize: 16,
    },
    macroInputsContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        gap: 10,
        marginBottom: 15,
    },
    macroInputGroup: {
        flex: 1,
    },
    macroInput: {
        backgroundColor: '#000000',
        borderRadius: 8,
        padding: 12,
        color: '#FFFFFF',
        fontSize: 16,
    },
    quickSelectContainer: {
        padding: 15,
        backgroundColor: '#1A1A1A',
        borderRadius: 12,
    },
    macroPreview: {
        alignItems: 'center',
        marginVertical: 15,
    },
    macroText: {
        color: '#FFFFFF',
        fontSize: 24,
        fontWeight: 'bold',
        marginBottom: 10,
    },
    macroDetails: {
        color: '#CCCCCC',
        fontSize: 16,
        marginVertical: 2,
    },
    sectionTitle: {
        color: '#FFFFFF',
        fontSize: 18,
        fontWeight: '500',
        marginBottom: 10,
        marginTop: 20,
    },
    categoriesContainer: {
        marginTop: 10,
    },
    categoryWrapper: {
        marginBottom: 8,
        backgroundColor: '#1A1A1A',
        borderRadius: 12,
        overflow: 'hidden',
    },
    categoryHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 15,
        paddingHorizontal: 12,
        backgroundColor: '#242424',
    },
    categoryHeaderActive: {
        backgroundColor: '#2C2C2C',
        borderBottomWidth: 1,
        borderBottomColor: '#333333',
    },
    categoryHeaderRight: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 8,
    },
    categoryTitle: {
        color: '#4CAF50',
        fontSize: 16,
        fontWeight: '600',
    },
    itemCount: {
        color: '#888888',
        fontSize: 14,
    },
    mealTypeContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between',
        padding: 8,
    },
    mealTypeButton: {
        width: '48%',
        backgroundColor: '#242424',
        padding: 15,
        borderRadius: 12,
        alignItems: 'center',
        marginBottom: 8,
    },
    selectedMealType: {
        backgroundColor: '#4CAF50',
    },
    mealTypeIcon: {
        fontSize: 24,
        marginBottom: 8,
    },
    mealTypeText: {
        color: '#FFFFFF',
        fontSize: 16,
    },
    portionContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginBottom: 20,
    },
    portionButton: {
        flex: 1,
        backgroundColor: '#1A1A1A',
        padding: 12,
        borderRadius: 12,
        marginHorizontal: 5,
        alignItems: 'center',
    },
    selectedPortion: {
        backgroundColor: '#4CAF50',
    },
    portionText: {
        color: '#FFFFFF',
        fontSize: 14,
    },
    disclaimerContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#242424',
        padding: 12,
        borderRadius: 8,
        marginBottom: 20,
    },
    disclaimerText: {
        color: '#999999',
        fontSize: 12,
        marginLeft: 8,
        flex: 1,
    },
});

export default PlanMealScreen;